from aiogram.types import Message, BotCommand, CallbackQuery
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton as IKB
from libs import answer_db_index, create_db_index, load_db_index
import logging
import os
from dotenv import load_dotenv
load_dotenv()


# –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞:
if not os.path.exists('db_index.faiss'):
    create_db_index(os.getenv("DATA_DOC_URL"))
    logging.info(f"create_db_index() - OK")
db_index = load_db_index('db_index')

router = Router()
dict_memory = dict()  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏


# Inline –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
def kb_clear_memory():
    return InlineKeyboardMarkup(
        inline_keyboard=[[IKB(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å",
                              callback_data="clear_memory")]])


# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def clear_memory(tg_id):
    try:
        global dict_memory
        dict_memory[tg_id] = ''
        logging.info(f'–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ({tg_id}) {
                     dict_memory[tg_id]}')
    except:
        logging.error('clear_memory()')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
@router.callback_query(F.data == "clear_memory")
async def handle_clear_callback(callback: CallbackQuery):
    await clear_memory(callback.from_user.id)
    # await callback.message.edit_reply_markup(reply_markup=None) # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await callback.message.delete()


# –ú–µ–Ω—é –±–æ—Ç–∞
@router.startup()
async def set_menu_button(bot: Bot):
    main_menu_commands = [
        BotCommand(command='/start', description='Start')]
    await bot.set_my_commands(main_menu_commands)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def cmd_start(message: Message):
    await clear_memory(message.from_user.id)
    await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¢–ï–•–ù–ò–ß–ï–°–ö–û–ú–£ –†–ï–ì–õ–ê–ú–ï–ù–¢–£ –¢–ê–ú–û–ñ–ï–ù–ù–û–ì–û –°–û–Æ–ó–ê '–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ñ–ï–õ–ï–ó–ù–û–î–û–†–û–ñ–ù–û–ì–û –ü–û–î–í–ò–ñ–ù–û–ì–û –°–û–°–¢–ê–í–ê'")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text)
async def handle_dialog(message: Message):
    logging.info(
        f"handle_dialog() - –ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {message.text}")
    global dict_memory
    if message.from_user.id not in dict_memory:
        dict_memory[message.from_user.id] = ''
    history = f"{dict_memory.get(f'{message.from_user.id}', '')}"

    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    response = await answer_db_index(
        '–û—Ç–≤–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è',
        f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏: \n{history} \n\n–ó–∞–ø—Ä–æ—Å: \n{message.text}", db_index)

    await message.answer(response)
    await message.answer("–ó–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º",
                         reply_markup=kb_clear_memory())

    logging.info(
        f"handle_dialog - –û—Ç–≤–µ—Ç: {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    # –∑–∞–ø–∏—Å—å –¥–∏–∞–ª–æ–≥–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    dict_memory[message.from_user.id] += \
        f"\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}\n\n–û—Ç–≤–µ—Ç: \n{response}"
